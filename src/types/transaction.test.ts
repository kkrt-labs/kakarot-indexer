import { assertExists } from "https://deno.land/std@0.213.0/assert/mod.ts";
import { Transaction } from "../deps.ts";
import { toTypedEthTx } from "./transaction.ts";

Deno.test("toTypedEthTx Legacy Transaction", () => {
  const bytes = [
    "0x01",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0xf8",
    "0x6a",
    "0x80",
    "0x85",
    "0x06",
    "0xfc",
    "0x23",
    "0xac",
    "0x00",
    "0x83",
    "0x01",
    "0x24",
    "0xf8",
    "0x94",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x03",
    "0x15",
    "0x80",
    "0xb8",
    "0x44",
    "0xef",
    "0x27",
    "0x69",
    "0xca",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x32",
    "0xe7",
    "0xe7",
    "0x67",
    "0xc3",
    "0x50",
    "0x77",
    "0xf4",
    "0x12",
    "0xdf",
    "0xd1",
    "0xb7",
    "0x7a",
    "0xad",
    "0xad",
    "0x76",
    "0x4c",
    "0xc1",
    "0x01",
    "0x89",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x0d",
    "0xe0",
    "0xb6",
    "0xb3",
    "0xa7",
    "0x64",
    "0x00",
    "0x00",
    "0x07",
    "0x80",
    "0x80",
  ] as `0x${string}`[];
  const tx: Transaction = {
    invokeV1: {
      senderAddress: "0x01",
      calldata: bytes,
    },
    meta: {
      hash: "0x01",
      maxFee: "0x01",
      nonce: "0x01",
      signature: ["0x1", "0x2", "0x3", "0x4", "0x32"],
      version: "1",
    },
  };

  const ethTx = toTypedEthTx({ transaction: tx });
  assertExists(ethTx);
});

Deno.test("toTypedEthTx EIP1559 Transaction", () => {
  const bytes = [
    "0x01",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x02",
    "0xef",
    "0x07",
    "0x01",
    "0x84",
    "0x3b",
    "0x9a",
    "0xca",
    "0x00",
    "0x84",
    "0x3b",
    "0x9a",
    "0xca",
    "0x00",
    "0x82",
    "0x52",
    "0x08",
    "0x94",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x84",
    "0x3b",
    "0x9a",
    "0xca",
    "0x00",
    "0x84",
    "0x37",
    "0x13",
    "0x03",
    "0xc0",
    "0xc0",
  ] as `0x${string}`[];
  const tx: Transaction = {
    invokeV1: {
      senderAddress: "0x01",
      calldata: bytes,
    },
    meta: {
      hash: "0x01",
      maxFee: "0x01",
      nonce: "0x01",
      signature: ["0x1", "0x2", "0x3", "0x4", "0x01"],
      version: "1",
    },
  };

  const ethTx = toTypedEthTx({ transaction: tx });
  assertExists(ethTx);
});

Deno.test("toTypedEthTx EIP2930 Transaction", () => {
  const bytes = [
    "0x01",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x01",
    "0xea",
    "0x07",
    "0x01",
    "0x84",
    "0x3b",
    "0x9a",
    "0xca",
    "0x00",
    "0x82",
    "0x52",
    "0x08",
    "0x94",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x00",
    "0x84",
    "0x3b",
    "0x9a",
    "0xca",
    "0x00",
    "0x84",
    "0x37",
    "0x13",
    "0x03",
    "0xc0",
    "0xc0",
  ] as `0x${string}`[];
  const tx: Transaction = {
    invokeV1: {
      senderAddress: "0x01",
      calldata: bytes,
    },
    meta: {
      hash: "0x01",
      maxFee: "0x01",
      nonce: "0x01",
      signature: ["0x1", "0x2", "0x3", "0x4", "0x01"],
      version: "1",
    },
  };

  const ethTx = toTypedEthTx({ transaction: tx });
  assertExists(ethTx);
});
